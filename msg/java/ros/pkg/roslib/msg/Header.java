/* auto-generated by genmsg_cpp from /usr/wiss/kargm/ros/ros/core/roslib/msg/Header.msg.  Do not edit! */
package ros.pkg.roslib.msg;


import java.nio.ByteBuffer;

public  class Header extends ros.communication.Message
{

  public int seq;
  public ros.communication.Time stamp;
  public java.lang.String frame_id;

  public Header() {
 super();
    stamp = new ros.communication.Time();
    frame_id = new java.lang.String();

  }
  public static java.lang.String __s_getDataType() { return "roslib/Header"; }
  public static java.lang.String __s_getMD5Sum() { return "2176decaecbce78abc3b96ef049fabed"; }
  public static java.lang.String __s_getMessageDefinition()
  {
    return 
    "# Standard metadata for higher-level stamped data types.\n" + 
    "# This is generally used to communicate timestamped data \n" + 
    "# in a particular coordinate frame.\n" + 
    "# \n" + 
    "# sequence ID: consecutively increasing ID \n" + 
    "uint32 seq\n" + 
    "#Two-integer timestamp that is expressed as:\n" + 
    "# * stamp.secs: seconds (stamp_secs) since epoch\n" + 
    "# * stamp.nsecs: nanoseconds since stamp_secs\n" + 
    "# time-handling sugar is provided by the client library\n" + 
    "time stamp\n" + 
    "#Frame this data is associated with\n" + 
    "# 0: no frame\n" + 
    "# 1: global frame\n" + 
    "string frame_id\n" + 
    "\n" + 
    "\n" + 
    "";
  }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public java.lang.String getMD5Sum()   { return __s_getMD5Sum(); }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }
  public Header clone() {
    Header clone = (Header)super.clone();
  stamp = (ros.communication.Time)stamp.clone();
    return clone;
  }

  public static java.util.Map<java.lang.String, java.lang.String> fieldTypes() {
         java.util.HashMap<java.lang.String, java.lang.String> m = new java.util.HashMap<java.lang.String, java.lang.String>  ();      m.put("seq", "int");
     m.put("stamp", "ros.communication.Time");
     m.put("frame_id", "java.lang.String");
     return m;
  }

  public static java.util.Set<java.lang.String> submessageTypes() {
         java.util.HashSet<java.lang.String> s = new java.util.HashSet<java.lang.String>  ();      return s;
  }

  public void setTo(ros.communication.Message __m) {
    if (!(__m instanceof Header)) throw new RuntimeException("Invalid Type");
    Header __m2 = (Header) __m;
    seq = __m2.seq;
    stamp = __m2.stamp;
    frame_id = __m2.frame_id;
    }

  public int serializationLength() 
  {
    int __l = 0;
    __l += 4; // seq
    __l += 8; // stamp
    __l += 4 + frame_id.length(); // frame_id
    return __l;
  }
  public void serialize(ByteBuffer bb, int seq) {
    bb.putInt(seq);
    Serialization.writeTime(bb, stamp);
    Serialization.writeString(bb, frame_id);
  }
  public void deserialize(ByteBuffer bb)  {
    seq = bb.getInt();
    stamp = Serialization.readTime(bb);
    frame_id = Serialization.readString(bb);
  }
}

