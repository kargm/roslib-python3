/* auto-generated by genmsg_cpp from /usr/wiss/kargm/ros/ros/core/roslib/msg/Clock.msg.  Do not edit! */
package ros.pkg.roslib.msg;


import java.nio.ByteBuffer;

public  class Clock extends ros.communication.Message
{

  public ros.communication.Time clock;

  public Clock() {
 super();
    clock = new ros.communication.Time();

  }
  public static java.lang.String __s_getDataType() { return "roslib/Clock"; }
  public static java.lang.String __s_getMD5Sum() { return "a9c97c1d230cfc112e270351a944ee47"; }
  public static java.lang.String __s_getMessageDefinition()
  {
    return 
    "# roslib/Clock is used for publishing simulated time in ROS. \n" + 
    "# This message simply communicates the current time.\n" + 
    "# For more information, see http://www.ros.org/wiki/Clock\n" + 
    "time clock\n" + 
    "\n" + 
    "\n" + 
    "";
  }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public java.lang.String getMD5Sum()   { return __s_getMD5Sum(); }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }
  public Clock clone() {
    Clock clone = (Clock)super.clone();
  clock = (ros.communication.Time)clock.clone();
    return clone;
  }

  public static java.util.Map<java.lang.String, java.lang.String> fieldTypes() {
         java.util.HashMap<java.lang.String, java.lang.String> m = new java.util.HashMap<java.lang.String, java.lang.String>  ();      m.put("clock", "ros.communication.Time");
     return m;
  }

  public static java.util.Set<java.lang.String> submessageTypes() {
         java.util.HashSet<java.lang.String> s = new java.util.HashSet<java.lang.String>  ();      return s;
  }

  public void setTo(ros.communication.Message __m) {
    if (!(__m instanceof Clock)) throw new RuntimeException("Invalid Type");
    Clock __m2 = (Clock) __m;
    clock = __m2.clock;
    }

  public int serializationLength() 
  {
    int __l = 0;
    __l += 8; // clock
    return __l;
  }
  public void serialize(ByteBuffer bb, int seq) {
    Serialization.writeTime(bb, clock);
  }
  public void deserialize(ByteBuffer bb)  {
    clock = Serialization.readTime(bb);
  }
}

