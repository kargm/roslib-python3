/* Auto-generated by genmsg_cpp for file /usr/wiss/kargm/ros/ros/core/roslib/msg/Log.msg */
#ifndef ROSLIB_MESSAGE_LOG_H
#define ROSLIB_MESSAGE_LOG_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "roslib/Header.h"

namespace roslib
{
template <class ContainerAllocator>
struct Log_ : public ros::Message
{
  typedef Log_<ContainerAllocator> Type;

  Log_()
  : header()
  , level(0)
  , name()
  , msg()
  , file()
  , function()
  , line(0)
  , topics()
  {
  }

  Log_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , level(0)
  , name(_alloc)
  , msg(_alloc)
  , file(_alloc)
  , function(_alloc)
  , line(0)
  , topics(_alloc)
  {
  }

  typedef  ::roslib::Header_<ContainerAllocator>  _header_type;
   ::roslib::Header_<ContainerAllocator>  header;

  typedef int8_t _level_type;
  int8_t level;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _file_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  file;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _function_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  function;

  typedef uint32_t _line_type;
  uint32_t line;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _topics_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  topics;

  enum { DEBUG = 1 };
  enum { INFO = 2 };
  enum { WARN = 4 };
  enum { ERROR = 8 };
  enum { FATAL = 16 };

  ROSCPP_DEPRECATED uint32_t get_topics_size() const { return (uint32_t)topics.size(); }
  ROSCPP_DEPRECATED void set_topics_size(uint32_t size) { topics.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_topics_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->topics; }
  ROSCPP_DEPRECATED void set_topics_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->topics = vec; }
private:
  static const char* __s_getDataType_() { return "roslib/Log"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "acffd30cd6b6de30f120938c17c593fb"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "##\n\
## Severity level constants\n\
##\n\
byte DEBUG=1 #debug level\n\
byte INFO=2  #general level\n\
byte WARN=4  #warning level\n\
byte ERROR=8 #error level\n\
byte FATAL=16 #fatal/critical level\n\
##\n\
## Fields\n\
##\n\
Header header\n\
byte level\n\
string name # name of the node\n\
string msg # message \n\
string file # file the message came from\n\
string function # function the message came from\n\
uint32 line # line the message came from\n\
string[] topics # topic names that the node publishes\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, level);
    ros::serialization::serialize(stream, name);
    ros::serialization::serialize(stream, msg);
    ros::serialization::serialize(stream, file);
    ros::serialization::serialize(stream, function);
    ros::serialization::serialize(stream, line);
    ros::serialization::serialize(stream, topics);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, level);
    ros::serialization::deserialize(stream, name);
    ros::serialization::deserialize(stream, msg);
    ros::serialization::deserialize(stream, file);
    ros::serialization::deserialize(stream, function);
    ros::serialization::deserialize(stream, line);
    ros::serialization::deserialize(stream, topics);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(level);
    size += ros::serialization::serializationLength(name);
    size += ros::serialization::serializationLength(msg);
    size += ros::serialization::serializationLength(file);
    size += ros::serialization::serializationLength(function);
    size += ros::serialization::serializationLength(line);
    size += ros::serialization::serializationLength(topics);
    return size;
  }

  typedef boost::shared_ptr< ::roslib::Log_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roslib::Log_<ContainerAllocator>  const> ConstPtr;
}; // struct Log
typedef  ::roslib::Log_<std::allocator<void> > Log;

typedef boost::shared_ptr< ::roslib::Log> LogPtr;
typedef boost::shared_ptr< ::roslib::Log const> LogConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::roslib::Log_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::roslib::Log_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace roslib

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::roslib::Log_<ContainerAllocator> > {
  static const char* value() 
  {
    return "acffd30cd6b6de30f120938c17c593fb";
  }

  static const char* value(const  ::roslib::Log_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xacffd30cd6b6de30ULL;
  static const uint64_t static_value2 = 0xf120938c17c593fbULL;
};

template<class ContainerAllocator>
struct DataType< ::roslib::Log_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roslib/Log";
  }

  static const char* value(const  ::roslib::Log_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::roslib::Log_<ContainerAllocator> > {
  static const char* value() 
  {
    return "##\n\
## Severity level constants\n\
##\n\
byte DEBUG=1 #debug level\n\
byte INFO=2  #general level\n\
byte WARN=4  #warning level\n\
byte ERROR=8 #error level\n\
byte FATAL=16 #fatal/critical level\n\
##\n\
## Fields\n\
##\n\
Header header\n\
byte level\n\
string name # name of the node\n\
string msg # message \n\
string file # file the message came from\n\
string function # function the message came from\n\
uint32 line # line the message came from\n\
string[] topics # topic names that the node publishes\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::roslib::Log_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::roslib::Log_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::roslib::Log_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.level);
    stream.next(m.name);
    stream.next(m.msg);
    stream.next(m.file);
    stream.next(m.function);
    stream.next(m.line);
    stream.next(m.topics);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Log_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roslib::Log_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::roslib::Log_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::roslib::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.level);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msg);
    s << indent << "file: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.file);
    s << indent << "function: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.function);
    s << indent << "line: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.line);
    s << indent << "topics[]" << std::endl;
    for (size_t i = 0; i < v.topics.size(); ++i)
    {
      s << indent << "  topics[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topics[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROSLIB_MESSAGE_LOG_H

